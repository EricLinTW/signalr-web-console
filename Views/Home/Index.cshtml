
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>SignalR Web Console Demo</title>
    <link rel="stylesheet" type="text/css" href="~/Content/css/site.css">
</head>
<body>
    <h2>SignalR Web Console Demo</h2>

    <p>
        This is a simple example of SignalR with one way communication from the server to the client. <br/>
        <br/>
        Clicking on 'Start Job' will dispatch an AJAX GET request to 
        an endpoint on the server. This endpoint will simulate running tasks that could take up to 6-10 seconds. During this time, real-time status and progress messages
        will be sent from the server to client (this page) via a SignalR connection. These messages will be printed in the console log.<br/>
        <br/>
        Finally, once the endpoint has finished running the simulated tasks it will return a server response and close the connection to our AJAX handler.
    </p>

    <div class="button-container">
        <button id="myButton">START JOB</button>
    </div>

    <div class="ww-console">
@*indentation delibrate due to <pre>*@
<pre id="output">
<span class="header">Console (output window)</span><hr />
</pre>
    </div>

    <script src="~/Scripts/jquery-1.6.4.min.js"></script>   <!-- jquery 1.6.4 and higher are supported -->
    <script src="~/Scripts/jquery.signalR-2.4.1.min.js"></script>   <!--Reference the SignalR library. -->
    <script src="~/signalr/hubs"></script>  <!--Reference the autogenerated SignalR hub script. -->

    <script type="text/javascript">

        $(document).ready(function () {

            initSignalR();

            $("#myButton").click(function () {
                var $button = $(this);
                $button.attr("disabled", "disabled").text("(AJAX request made - waiting for server response...)");

                // Clear any previous logs (apart from header)
                $("#output span:not(.header)").empty();

                // Call server action method to 'simulate' work; note we must pass the signalR connection id instance which
                // identifies 'this page' as the caller. This ensures we only recieves messages relating to our http context.
                $.get("Home/DoWork?connectionId=" + $.connection.hub.id, function (data, status) {
                    console.log(data);
                    $button.removeAttr("disabled").text("START JOB AGAIN");;
                });
            });
        });

        // Sets up a signalR connection to a hub named 'progressHub'. This refers to the "ProgressHub.cs" file.
        // A handler 'progressNotifier.client.sendMessage' is setup to recieve the messages dispatched by signalR
        // on there serverside. Again, the 'sendMessage' method can be found in the "ProgressHub.cs" file.
        function initSignalR() {

            var progressNotifier = $.connection.progressHub;

            // establish the connection to the signalR hub on the server
            $.connection.hub.start().done(function () {

                //example of a call a method on the signalR hub (ProgressHub.cs)
                progressNotifier.server.hello();

                //print signalR connection id instance (debugging)
                var connectionId = $.connection.hub.id;
                console.log(connectionId);
            });

            // client-side sendMessage handler - prints signalR messages when received to the web console
            progressNotifier.client.sendMessage = function (message) {
                var s = $("<span></span>").html(message).appendTo("#output");
            };
        }

    </script>
</body>
</html>
